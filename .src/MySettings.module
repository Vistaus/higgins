' Gambas module file

Public Sub save()

  save_geometry()
  Settings.Save()
End


Public plugin_indexer_last_index_time As Date

Public Sub load()
  hSettings.ComboboxTerminalEmulator.text = Settings["terminal_emulator", Global.find_term()]
  hSettings.ComboboxIconThemes.text = Settings["icon_theme", ""]
  load_geometry()
  hSettings.ColorButton1.value = Settings["style/background", Color.background]
  hSettings.checkbox1.value = Settings["style/undecorated", CheckBox.false]
  hSettings.SpinBoxExtraPad.value = Settings["style/extrapad", 0]
  hSettings.ButtonPicture.text = Settings["style/backpicture", ""]
  If hSettings.ButtonPicture.text <> "" Then 
    Try Global.backimage = loadBackimage(hSettings.ButtonPicture.text)
    If Error Then Debug "Could not load background image"
  Endif
  hSettings.SpinBoxwopacity.value = Settings["style/inneropacity", 100]
  Global.text_foreground = Settings["style/textfg", Color.TextForeground]
  hSettings.colorbuttontextfg.value = Global.text_foreground 
  hSettings.colorbuttontextbg.value = Settings["style/textbg", Color.TextBackground]
  hSettings.CheckBoxborder.value = Settings["style/border", CheckBox.false]
End

Public Sub loadBackimage(ifile As String) As Image
  Dim i As Image
  Try i = Image.Load(ifile)
  If i.w > Screen.AvailableWidth Then i = i.Stretch(Screen.AvailableWidth, i.h)
  If i.h > Screen.AvailableHeight Then i = i.Stretch(i.w, Screen.AvailableHeight)
  Return i
End



Public Sub save_geometry()
  Dim xy_r As Integer[]
  xy_r = Relative_window_geom(fmain)

  Settings["win_rx"] = xy_r[0]
  Settings["win_ry"] = xy_r[1]
  Settings["win_w"] = xy_r[2]
End

Public Sub load_geometry()
  Dim s As Screen
  Dim rx, ry, w As Integer
  s = Screenbypos(Mouse.ScreenX, Mouse.ScreenY)
  rx = Settings["win_rx", 0] 
  ry = Settings["win_ry", 0] 
  w = Settings["win_w", (s.w Div 2)] 
  ' h = Settings["win_h", 64] 
  fmain.Move(rx + s.x, ry + s.y, w)
End


Private Function Screenbypos(x As Integer, y As Integer) As Screen
  Dim s As Screen
  For Each s In Screens
    If (x >= s.x) And x <= (s.x + s.W) Then
      If (y >= s.y) And y <= (s.y + s.h) Then
        Return s
      Endif
    Endif
  Next
  'no screen found !? repeat with more tolerance:
  For Each s In Screens
    If (x + 50 >= s.x) And x <= (s.x + s.W + 50) Then
      If (y + 50 >= s.y) And y <= (s.y + s.h + 50) Then
        Return s
      Endif
    Endif
  Next
  'still no screen found? return the first.
  Debug "Couldn 't get the matching screen (!)"
  Return Screens[0]
End

Public Function Relative_window_geom(o As Window) As Integer[]
  'get the object position relative to the screen is on
  Dim rx, ry, ox, oy As Integer
  Dim cs As Screen
  Dim out As New Integer[]
  cs = Screenbypos(o.x, o.y)
  ox = cs.X 'offset
  oy = cs.Y 'offset
  rx = o.x - ox
  ry = o.y - oy
  out.Add(rx)
  out.Add(ry)
  out.Add(o.w)
  out.Add(o.h)
  Return out
End
