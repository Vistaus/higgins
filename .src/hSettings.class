' Gambas class file

Public Sub Button1_Click()
  Try FMain.xb.close()
  FMain.setup_xbindkeys()
  If FMain.xb.init_error Then
    Try FMain.setup_xbindkeys()
    If FMain.xb.init_error Then 
      FMain.xb_show_init_error(True)
      Return
    Endif
  Endif
  Me.mouse = Mouse.wait
  Wait 0.1
  Me.enabled = False
  Wait
  Message.Info("A blank window will open shortly,\nPlease press the desidered shortcut there.")
  FMain.xb.clear_hotkeys()
  FMain.xb.register("show")
  Me.enabled = True
  Me.mouse = Mouse.normal
  ShowShortcut()
End

Public Sub Form_Hide()
  If Me.closed Then Return
  MySettings.save()
  FMain.Show()
End

Public Sub ComboboxTerminalEmulator_Change()
  Settings["terminal_emulator"] = ComboboxTerminalEmulator.text
  Settings.Save()
End

Public Sub Panel1_BeforeArrange()
  ShowShortcut()
End

Private Sub ShowShortcut()

  Dim s As String[]

  hSettings.button1.text = ("Change")
  Try s = Split(File.Load(FMain.xb_rcpath), "\n", "", True)

  If Error Then Return

  hSettings.button1.text = s[s.max]
 
End

Public Sub ButtonOpenExtPlugin_Click()

  Desktop.Open(FMain.extbinpath)

End

Public Sub UpdateIconThemes()
  Dim theme As String
  Dim extext As String = ComboboxIconThemes.text
  Object.Lock(ComboboxIconThemes)
    ComboboxIconThemes.Clear()
  Object.unLock(ComboboxIconThemes)
  For Each theme In Stock.Themes
    If ComboboxIconThemes.Find(theme) < 0 Then
      ComboboxIconThemes.Add(theme)
    Endif
  Next
  ComboboxIconThemes.text = extext
End


Public Sub Panel2_Arrange()
  
  UpdateIconThemes()

End

Public Sub ComboboxIconThemes_Change()
  Settings["icon_theme"] = ComboboxIconThemes.text
  Debug Settings["icon_theme"] 
  Settings.Save()
End




Public Sub ColorButton1_Change()
  gstyle.applystyle()
  Settings["style/background"] = ColorButton1.value
  Settings.Save
End

Public Sub Button2_Click()
  ColorButton1.value = Color.Background
  Settings["style/background"] = ColorButton1.value
  Settings.Save
  gstyle.applystyle()
End



Public Sub CheckBox1_Click()
  If Not Global.fullyloaded Then Return
  Settings["style/undecorated"] = CheckBox1.value
  FMain.Hide
  Wait 0.1
  FMain.show
End

Public Sub SpinBoxExtraPad_Change()
  Settings["style/extrapad"] = SpinBoxExtraPad.value
  fmain.check_min_size(True)
  gstyle.applystyle()
End

Public Sub set_bg_picture()
  If ComboPicture.Current.text <> "" Then
      Try Global.backimage = MySettings.loadBackimage(hSettings.ComboPicture.text)
      If Error Then Debug "Could not load background image"
        Else
      Global.backimage = Null
  Endif
  gstyle.applystyle()
  gstyle.make_background()
  Settings["style/backpicture"] = ComboPicture.text 
  Settings.save()
End


Public Sub ComboPicture_Click()
  If ComboPicture.Current.text = ComboPicture[0].text Then 
    Dialog.title = ("Choose a picture")
    If Not Dialog.OpenFile() Then
      ComboPicture.text = Dialog.path
      Wait
      Settings["style/backpicture"] = ComboPicture.text 
    Endif
  Endif
  set_bg_picture()
End

Public Sub ComboPicture_Clear()
  Settings["style/backpicture"] = ""
  Global.backimage = Null
  gstyle.applystyle()
End

Public Sub SpinBoxwopacity_Change()
  Settings["style/inneropacity"] = SpinBoxwopacity.value
  gstyle.applystyle()
End



Public Sub Button3_Click()
  colorbuttontextfg.value = Color.TextForeground
  Settings["style/textfg"] = colorbuttontextfg.value
  gstyle.applystyle()
End

Public Sub colorbuttontextfg_Change()
  gstyle.applystyle()
  Settings["style/textfg"] = colorbuttontextfg.value
  Settings.Save
End


Public Sub Button4_Click()
  colorbuttontextbg.value = Color.TextBackground
  Settings["style/textbg"] = colorbuttontextbg.value
  gstyle.applystyle()
End

Public Sub ColorButtontextbg_Change()
  gstyle.applystyle()
  Settings["style/textbg"] = colorbuttontextbg.value
  Settings.Save
End

Public Sub CheckBoxborder_Click()
  Settings["style/border"] = CheckBoxborder.value
  Settings.save
  gstyle.applystyle()
End



Public Sub CheckboxShadow_Click()
  If Not Global.FULLYLOADED Then Return
  object.lock(fmain)
   FMain.Hide
   Wait 0.1
   FMain.show
  Object.Unlock(fmain)
  Settings["style/shadows"] = CheckboxShadow.value
  panelshadow.enabled = (CheckboxShadow.value = CheckBox.true)
  gstyle.make_background()
      Object.Lock(fmain)
        fmain.border = Not fmain.border
        fmain.border = Not fmain.border
      Object.Unlock(fmain)
  Wait
  fmain.check_min_size(True)
  
End

Public Sub PanelShadow_Arrange()
  panelshadow.enabled = (CheckboxShadow.value = CheckBox.true)
End


Public Sub SpinBoxshadowsize_Change()
  If Last.value Mod 2 <> 0 Then
    Inc Last.value
    Return
  Endif
  Settings["style/shadowsize"] = Last.value
  Settings.save
  gstyle.make_background()
  fmain.check_min_size()
End

Public Sub SpinBoxshadowgamma_Change()
  Settings["style/shadowgamma"] = Last.value
  Settings.save
  gstyle.make_background()
End

Public Sub SpinBoxshadowalpha_Change()
  Settings["style/shadowalpha"] = Last.value
  Settings.save
  gstyle.make_background()
End



Public Sub SpinBoxcornerradius_Change()
  Settings["style/cornerradius"] = Last.value
  Settings.save
  gstyle.make_background()
End

Public Sub ComboPicture_Enter()
  Dim f As String
  Dim ptext As String = ComboPicture.text
  ComboPicture.clear
  ComboPicture.add(("Load an image"))
  ComboPicture.Add("")
  For Each f In Dir("backgrounds").Sort()
    ComboPicture.Add("backgrounds/" & f)
  Next
  ComboPicture.text = ptext
End
