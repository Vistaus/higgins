' Gambas class file

 Create Static
 
Public dname As String
Public dExec As String
Public dTerminal As String
Public dType As String
Public dIconName As String
Public dCategory As String
Public dGenericName As String
Public dComment As String
Public dComment_ES As String
Public dNoDisplay As String
Public dDisplayOnlyIn As String
Public dNotShowIn As String


Public Sub init()
 dname = ""
 dExec = ""
 dTerminal = ""
 dType = ""
 dIconName = ""
 dCategory = ""
 dGenericName = ""
 dComment = ""
 dComment_ES = ""
 dNoDisplay = ""
 dDisplayOnlyIn = ""
 dNotShowIn = ""
End


Public Function parse(desktopfile As String)
  Dim sLine, sPath As String
  Dim sAppPath As String
  Dim sSection As String
  If Not Exist(desktopfile, True) Then Return
    For Each sLine In Split(File.Load(desktopfile), "\n")
      sLine = Trim(sLine)
      If sLine Begins "[" Then 
        sSection = Mid(sLine, 2, Len(sLine) - 2)
        If LCase(sSection) <> "desktop entry" Then Break
      Endif
      If sLine Begins "Name=" Then dName = Right(sLine, - InStr(sLine, "="))
      If sLine Begins "Exec" Then dExec = Right(sLine, - InStr(sLine, "="))
      If sLine Begins "Terminal" Then dTerminal = CBool(Right(sLine, - InStr(sLine, "=")))
      If sLine Begins "Type" Then dType = Right(sLine, - InStr(sLine, "="))
      If sLine Begins "Icon" Then dIconName = Right(sLine, - InStr(sLine, "="))
      If sLine Begins "Categories" Then dCategory = Right(sLine, - InStr(sLine, "="))
      If sLine Begins "GenericName=" Then dGenericName = Right(sLine, - InStr(sLine, "="))
      If sLine Begins "Comment=" Then dComment = Right(sLine, - InStr(sLine, "="))
      If sLine Begins "Comment[es]=" Then dComment_ES = Right(sLine, - InStr(sLine, "="))
      If sLine Begins "NoDisplay" Then dNoDisplay = CBool(Right(sLine, - InStr(sLine, "=")))
      If sLine Begins "DisplayOnlyIn" Then dDisplayOnlyIn = CBool(Right(sLine, - InStr(sLine, "=")))
      If sLine Begins "NotShowIn" Then dNotShowIn = CBool(Right(sLine, - InStr(sLine, "=")))
    Next
End

Static Private image_cache As New Collection

Static Public Sub Get_mime_Icon(path As String, Optional rSize As Integer = 16) As Image
  Dim mimetype As String
  Dim aKey As String 

  mimetype = DesktopMime.FromFile(path).type
  aKey = mimetype & Chr(8) & rsize

  If Not image_cache.Exist(aKey) Then 

    image_cache[aKey] = DesktopMime.FromFile(path).GetIcon(rSize)
    Debug DesktopMime.FromFile(path).type
    Debug "MISS"
      Else
    Debug "HIT"
  Endif
  Return image_cache[aKey]

End


Static Public Sub GetIcon(dIconName As String, Optional Size As Integer = 16) As Image
  
  Dim sPath As String
  Dim hImage As Image
  Dim sKey As String
  
  Dim sDir As String
  Dim sSize As String
  Dim hSvg As SvgImage
  Dim s As String

  If Exist(dIconName) Then 
    If dIconName Ends ".svg" Then
      hSvg = SvgImage.Load(dIconName)
      hImage = New Image(Size, Size)
      Paint.Begin(hImage)
      hSvg.Resize(size, Size)
      hSvg.Paint
      Paint.End
    Else
      Try hImage = Image.Load(dIconName)
    Endif
    
  Else
    If ((dIconName Ends ".png") Or (dIconName Ends ".xpm")) Then dIconName = File.BaseName(dIconName)
    For Each sDir In [Desktop.DataDir &/ "icons", "/usr/share/icons"]
      'For Each sSize In [CStr(Size), "128", "64", "32"]      
      For Each sSize In [CStr(Size), "256", "128", "64", "48", "32" "22", "16", "8"]
        sPath = Subst(sDir &/ "hicolor/&1x&1/apps/&2.png", sSize, dIconName)
        If Exist(sPath) Then 
          Try hImage = Image.Load(sPath)
          If hImage Then Break
        Endif
        sPath = Subst(sDir &/ "hicolor/&1x&1/apps/&2.xpm", sSize, dIconName)
        If Exist(sPath) Then 
          Try hImage = Image.Load(sPath)
          If hImage Then Break
        Endif
      Next
      If hImage Then Break
    Next
    
    If Not hImage Then
      sPath = Subst("/usr/share/pixmaps/&1.png", dIconName)
      If Exist(sPath) Then Try hImage = Image.Load(sPath)
    Endif

    If Not hImage Then
      sPath = Subst("/usr/share/pixmaps/&1.xpm", dIconName)
      If Exist(sPath) Then Try hImage = Image.Load(sPath)
    Endif

  Endif
  If Not hImage Then
    'For Each s In ["apps", "actions", "places", "devices"]
    For Each s In ["apps", "actions", "places", "devices", "categories", "emblems", "mime", "misc", "status", "mimetypes"]
      Try hImage = Stock[CStr(Size) &/ s &/ dIconName].Image
      If hImage Then Break
    Next
  Endif
  If Not hImage Then hImage = Stock[CStr(Size) &/ "program"].Image
  If hImage.W <> Size Or If hImage.H <> Size Then hImage = hImage.Stretch(Size, Size)
  Return hImage
Catch

End


