' Gambas module file

Public Sub applystyle()
  Dim wopacity As Integer
  Dim wopacitygrid As Integer
  
  If Not Global.fullyloaded Then Return
  
  'window background 
    If fmain.PictureBoxBackground.picture <> Null Then
      fmain.PictureBoxBackground.Background = Color.Default
        Else
      fmain.PictureBoxBackground.Background = hSettings.ColorButton1.value
    Endif
  'padding 
    FMain.panel2.padding = Desktop.scale + hSettings.SpinBoxExtraPad.value
 
  'background
    gstyle.make_background()
 
 
 
  'text fg/bg
    Global.text_foreground = hSettings.colorbuttontextfg.value
    FMain.ResultGrid.background = hSettings.colorbuttontextbg.value
    FMain.ResultGrid.Foreground = Global.text_foreground
    FMain.textbox2.Background = hSettings.colorbuttontextbg.value
    FMain.TextBox2.Foreground = Color.Merge(Global.text_foreground, hSettings.colorbuttontextbg.value, 0.75)
    FMain.TextBox1.Foreground = hSettings.colorbuttontextfg.value
  
 
  'inner widgets opacity 
    FMain.ResultGrid.border = (hSettings.SpinBoxwopacity.value >= 75)
    
    wopacity = CInt(hSettings.SpinBoxwopacity.value * (255 / 100))
    wopacitygrid = CInt(wopacity * (wopacity / 255)) 'hack for gambas bug (?)
    If wopacity = 0 Then wopacity = 1
    If wopacitygrid = 0 Then wopacitygrid = 1
  
    FMain.ResultGrid.background = Color.SetAlpha(FMain.ResultGrid.background, 255 - wopacitygrid)
    FMain.buttonconfigure.background = Color.SetAlpha(FMain.buttonconfigure.background, 255 - wopacity)
    FMain.textbox2.background = Color.SetAlpha(FMain.textbox2.background, 255 - wopacity)
  
 
  'window border drawing
    If hSettings.CheckBoxborder.value = CheckBox.true Then 
      FMain.Panel2.border = Border.plain
        Else
      FMain.Panel2.border = Border.none
    Endif

  'FMain.resize_form()
End

Private restart_message As Boolean = True
Public Sub make_background(Optional bFast As Boolean = False)
  Dim flat_img As Image

  'Se c'è ombra, fai l'ombra con l'eventuale immagine
  
  If hSettings.CheckboxShadow.value = CheckBox.true Then
      Try FMain.Transparent = True
      fmain.PictureBoxBackground.Show
      fmain.PictureBoxBackground.background = Color.Transparent
      fmain.margin = True
      fmain.padding = hSettings.SpinBoxshadowsize.value
      fmain.PictureBoxBackground.border = False
      'If (fmain.padding * 4) > fmain.h Then fmain.padding = (fmain.h Div 4) - 1
      FMain.PictureBoxBackground.picture = gstyle.shadow(fmain, FMain.padding, hSettings.SpinBoxshadowalpha.value, hSettings.spinboxshadowgamma.value / 10, Global.backimage, hSettings.ColorButton1.value, hSettings.SpinBoxcornerradius.value, bfast)
      Return  
  Endif

  fmain.margin = False
  fmain.padding = 0
  
  'se c'è solo immagine, fai solo l'immagine
  If Global.backimage <> Null Then 
      Try FMain.Transparent = True
      fmain.PictureBoxBackground.Show
      fmain.PictureBoxBackground.background = -1
      FMain.PictureBoxBackground.picture = round_img(Global.backimage.Stretch(FMain.w, FMain.h), hSettings.SpinBoxcornerradius.value).picture
      Return
  Endif
  
  'plain backgound with rounded corners
  If hSettings.SpinBoxcornerradius.value <> 0 Then
    Try FMain.Transparent = True
    fmain.PictureBoxBackground.Show

   FMain.PictureBoxBackground.background = Color.Transparent
   flat_img = New Image
   flat_img.Resize(fmain.PictureBoxBackground.w, fmain.PictureBoxBackground.h)
   flat_img = flat_img.Resize(fmain.PictureBoxBackground.w, fmain.PictureBoxBackground.h).Fill(fmain.pictureboxbackground.background)
   fmain.PictureBoxBackground.picture = round_img(flat_img, hSettings.SpinBoxcornerradius.value).picture
  Endif
  
  
  'altrimenti, resetta:
    If fmain.transparent = True Then
      If restart_message Then
        If Message.Question("You may need to restart higgins for changes to take effect", "Ok", "Do not show anymore") = 2 Then restart_message = False
      Endif
    Endif
    Try FMain.Transparent = False 
    FMain.PictureBoxBackground.border = False
    fmain.PictureBoxBackground.Background = hSettings.ColorButton1.value
    fmain.PictureBoxBackground.hide
    FMain.PictureBoxBackground.picture = Null
End


Public Sub round_img(i As Image, r As Integer) As Image
  'returns i with rounded corners

  Dim out_img As New Image
  If r = 0 Then Return i
  out_img.Resize(i.w, i.h)

  Paint.Begin(out_img)

    'clear the image
    Paint.Brush = Paint.Color(Color.Transparent)
    Paint.operator = Paint.OperatorClear
    Paint.Rectangle(0, 0, i.W, i.H, 0)
    Paint.Fill()

    'draw shaped image
    Paint.operator = Paint.Operatorover
    Paint.brush = Paint.Image(i)
    Paint.Rectangle(0, 0, i.w, i.h, r)
    Paint.Fill()

  Paint.end
  
  Return out_img
End

Public Function shadow(f As Object, radius As Integer, alpha As Integer, fgamma As Float, Optional i As Image = Null, Optional window_color As Integer = Color.Background, Optional round_corner As Integer = 0, Optional bfast As Boolean = False) As Picture
  Dim topimage As Image
  Dim shadowimage As Image
  Dim shadowcolor As Integer = Color.SetAlpha(Color.black, alpha)
  Dim ff As Integer = 1
  Dim fw, fh As Integer
  Dim sRadius As Integer
  Dim cRadius As Integer
  
  'Reduce rendering quality?
    If bfast Then ff = 2
    fw = f.w Div ff
    fh = f.h Div ff
    Sradius = radius Div ff
    cRadius = round_corner Div ff

  'create the top image
    If i <> Null Then
      topimage = i.Copy()
      topimage = topimage.stretch(fw - (Sradius * 2), fh - (Sradius * 2))  
        Else
      topimage = New Image(fw - (Sradius * 2), fh - (Sradius * 2))
      topimage = topimage.Fill(Window_color)
    Endif
    
    If cRadius <> 0 Then topimage = round_img(topimage, cRadius)    
    
  'create the shadow (a little bigger than topimage)
    shadowimage = New Image(fw, fh)
    shadowimage = shadowimage.Fill(Color.white)
    shadowimage.PaintRect(Sradius, Sradius, shadowimage.w - (Sradius * 2), shadowimage.h - (Sradius * 2), shadowcolor)
    shadowimage = shadowimage.fuzzy(Sradius).gamma(fgamma) 
    shadowimage.Erase(Color.white)
    
  'Clear the topimage shape from the shadowimage
    Paint.Begin(shadowimage)
      Paint.Brush = Paint.Color(Color.transparent)
      Paint.operator = Paint.OperatorClear
      Paint.Rectangle(Sradius, Sradius, shadowimage.w - (Sradius * 2), shadowimage.h - (Sradius * 2), cRadius)
      Paint.Fill()
    paint.end
    
  'blend the topimage over the shadow    
    shadowimage.paintimage(topimage, Sradius, Sradius)
  
  Return shadowimage.picture
  
End

