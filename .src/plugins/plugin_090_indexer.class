' Gambas class file

Create Static
Static Public Description As String = "Index filenames from user-defined folders."
Static Public Friendly_name As String = "Indexer"
Static Public configurable As Boolean = True
Static Public Default_enabled As Boolean = True

Public Struct rItemT
  plugin As String            'the plugin name
  Text As String              'text displayed in the clipboard
  SubText As String           'text displayed under the main text
  Image_file As String        'optional image displayed (fullpath or "DefferredMimeIcon")
  Clipboard_data As String    'the data copied to the clipboard
  Action As String            'string that indicates an action
  Action_p As Variant          'the parameter for Action
End Struct


Private plugin As String
Private iconsize As Integer
Private minchar As Integer = 4   'exit if the search term is lower than that

Private index_db As New String[]
Private index_file As String

Private caller As Object

Public Sub _new(p_plugin As String, p_iconsize As Integer)

  caller = Last
  index_file = fmain.Confpath & "/indexer.txt"

  plugin = p_plugin
  iconsize = p_iconsize
  
  Try index_db = Split(File.Load(index_file))
  plugin_indexer_gui.init(Me)
  plugin_indexer_gui.LoadSettings()
  restart_timer()  

End


Public Sub Stop()
  
  'not sure if this is the right way, but this should be called when the plugin has to be unloaded
  reindex_timer.stop
  
End

Public Sub _free()

End

Private Sub trigged(query As String) As Boolean
  If Len(query) < minchar Then Return False
  If Left(query) = "=" Then Return
  If Right(query) = "=" Then Return
  'some more controls here (?)
  Return True
End

Private Function which_is_better(a As String, b As String) As String
  If a > b Then Return a
  Return b
End


Public Sub find(textcontrol As Object) As RItemT[]
  'search for filedialogs bookmarks
  Dim rResults As New RItemT[]
  Dim rResult As RItemT
  Dim current_search As String = textcontrol.text
  Dim i, j As Integer
  Dim results_pushed As Integer
  Dim sorted_db As New String[]
  Dim placed As Boolean
  If Not trigged(textcontrol.text) Then Return

'   For i = 0 To index_db.max
'     If index_db[i] Like "*" & current_search & "*" Then 
' Stop
'       placed = False
'       For j = 0 To sorted_db.Max
' 
'         If which_is_better(index_db[i], sorted_db[j]) = index_db[i] Then
'           sorted_db.Add(index_db[i], sorted_db[j])
'           placed = True
'           Break
'         Endif
'       Next
'       If Not placed Then sorted_db.Add(index_db[i])
'     Endif
'   Next



  For i = 0 To index_db.max
    If index_db[i] Like "*" & current_search & "*" Then 
      rResult = create_item(index_db[i])
      If rResult <> Null Then 
        rResults.Add(rResult)
        Wait 0.0005
        If rResults.count >= 25 Then 
          Raise new_results(rResults)
          results_pushed += rResults.Count
          If results_pushed >= plugin_indexer_gui.SpinMaxResults.value Then Return
          rResults.clear
        Endif
      Endif
      textcontrol.refresh()
      Wait
      If current_search <> textcontrol.text Then
        Debug "Cancelling previous search " & current_search
        Return
      Endif 
    Endif
    If (i Mod 25) = 0 Then
      If rResults.count > 0 Then
        Wait 0.0005
        Raise new_results(rResults)
        results_pushed += rResults.Count
        If results_pushed >= plugin_indexer_gui.SpinMaxResults.value Then Return
        rResults.clear
      Endif
    Endif
  Next

  Return rResults

End


Private Function create_item(path As String) As RItemT
  Dim return_item As RItemT
  
  If Not (Exist(path, True)) Then Return Null
  return_item = New RItemT  

  If path Ends ".desktop" Then 
    MyDesktop.init()
    MyDesktop.parse(path)
    return_item.image_file = "resize://" & MyDesktop.Get_file_Icon(MyDesktop.dIconName, iconsize)
      Else
    If Stat(path, True).type = gb.Directory Then
      return_item.image_file = "icon:/" & iconsize & "/directory"
        Else
      return_item.image_file = "mimetype://" & path
    Endif
  Endif
  
  return_item.plugin = plugin
  return_item.Action = "GUESS"
  return_item.Action_p = path
  return_item.Clipboard_data = path
  
  return_item.Text = File.Name(path)
  return_item.SubText = "In: " & File.Dir(path)

  Return return_item
End

Public Sub configure()
  'this starts the configuration window.
  plugin_indexer_gui.Show()
End

Event new_results(rResults As RItemT[])

Public reindex_timer As Timer
Private reindex_minutes_timeout As Integer 

Public Sub restart_timer()
  Dim minutes_integer As Integer
  Dim minutes_timeout As Date = plugin_indexer_gui.ValueBoxReindex.value
  Dim gui As Form = plugin_indexer_gui

  minutes_integer = (Hour(minutes_timeout) * 60) + Minute(minutes_timeout)
  If gui.last_index_time = Null Then gui.last_index_time = Date(1900, 1, 1)

  reindex_timer = New Timer As "reindex_timer"
  reindex_timer.delay = 60000
  reindex_minutes_timeout = minutes_integer
  reindex_timer.start
  reindex_timer.Trigger()
End



Public Sub reindex_timer_Timer()
  Dim time_diff As Integer
  time_diff = DateDiff(plugin_indexer_gui.last_index_time, Now(), gb.Minute)
  Debug reindex_minutes_timeout - time_diff, "minutes to go"
  If time_diff >= reindex_minutes_timeout Then
    reindex_timer.stop
    ReIndex()
  Endif

End


Public indexing As Boolean = False
Private indexprocess As Process
Public Sub ReIndex()
  Dim r As Integer
  Dim depth, dir As String
  Dim cmdline As String
  Dim agrid As Tableview = plugin_indexer_gui.GridIndex
  Dim sPath As String
  reindex_timer.stop
  Try indexprocess.kill
  index_db.clear
  For r = 0 To aGrid.Rows.max
    sPath = aGrid[r, 1].text
    If Not (sPath Ends "/") Then sPath &= "/"
    depth = aGrid[r, 0].text
    dir = "'" & sPath & "'"
    cmdline &= "; nice -n 19 ionice -c3 schedtool -B -e find " & dir & " -maxdepth " & depth 
  Next
  If cmdline Begins ";" Then cmdline = Right(cmdline, -1)
  cmdline = "sh -c " & "\"" & cmdline & "\""
  Debug "Indexing..."
  Debug cmdline
  indexprocess = Shell cmdline For Read As "indexprocess"
  indexing = True
End

Public Sub indexprocess_Read()
  Dim oLine As String
  Line Input #indexprocess, oline
  index_db.Add(oline)
End

Public Sub indexprocess_kill()
  Debug "Finished indexing"
  indexing = False
  'Raise indexing_done(Now())
  File.Save(index_file, index_db.Join())
  plugin_indexer_gui.last_index_time = Now()
  Try index_db = Split(File.Load(index_file))
  plugin_indexer_gui.SaveSettings()
  reindex_timer.start
End

