' Gambas class file

Public xb As XbindKeys
Public Const appname As String = "higgins"
Public Confpath As String = Settings.defaultdir & "/" & appname
Public extbinpath As String = Settings.defaultdir & "/" & appname & "/extbin"
Public xb_rcpath As String = confpath & "/higgins.xb.rc"

Public Struct rItemT
  plugin As String            'the plugin name
  Text As String              'text displayed in the clipboard
  SubText As String           'text displayed under the main text
  Image_file As String        'optional image displayed (fullpath or "DefferredMimeIcon")
  Clipboard_data As String    'the data copied to the clipboard
  Action As String            'string that indicates what to do when activating an item:
  Action_p As Variant         'the parameter for Action
End Struct

Public results_file As String = Temp()
Public results_list As New RItemT[]
Public picture_list As New Collection
Public rSize As Integer
Public Socket_File As String = Confpath & "/socket"
Public Lock_File As String = Confpath & "/lock"
Private plugins_enabled As String[]
Private plugins_all As String[]

Public Sub resize_form()
  Dim pad As Integer
  If fmain.padding = 0 Then 
    pad = Desktop.scale
      Else
    pad = fmain.padding
  Endif
  FMain.h = TextBox1.h + (pad * 2)
End

Public textbox1_change_delay As Timer 

Public Sub textbox1_change_delay_timer()

  TextBox1_Change()

End

Public Sub TextBox1_Change()

  Dim previous_search As String
  Dim current_search As String
  Dim c As String
                 'Debug
  global.object_lock(TextBox1)
  c = Complete(TextBox1.text)
  TextBox2.text = c
  global.object_unlock(TextBox1)
                                                  'Debug  
  Try current_search = TextBox1.text 
  If Error Then Return
                                                  'Debug
  Wait 0.01
  If Len(current_search) < 2 Then 
    resize_form()
    reinit()
    Return
  Endif
                                                    'Debug
  Try previous_search = TextBox1.text
  If Error Then Return
                                                    'Debug
  Wait 0.3
  If previous_search <> textbox1.text Then Return 'user is typing
                                                  'Debug
  immediate_search(textbox1)
  If resultgrid.current = Null Then Try resultgrid.Rows[0].Selected = True
  Wait 0.3
                                                    'Debug
  Try current_search = TextBox1.text 
  If Error Then Return
  If previous_search <> current_search Then Return
                                                    'Debug
  If resultgrid.Rows.count > 0 Then showgrid
returnlabel:
  If resultgrid.current = Null Then Try resultgrid.Rows[0].Selected = True


End

Public Sub initgrid()
  ResultGrid.Rows.count = 0
  ResultGrid.columns.count = 1
  ResultGrid.mode = Select.Single
  ResultGrid.Show()
  Wait
End

Public Sub reinit()

  results_list.Clear()
  picture_list.Clear()
  initgrid()
  MyDesktop.init()
  mouse_normal()

End

Private plugins As New Collection 'a collection of plugin instances


Public Sub load_plugin(plugin_name As String, iconsize As Integer)
  Dim myplugin As Object
  If Not (plugin_name Begins "EXT:") Then 
     Try myplugin = Object.New(plugin_name, [plugin_name, iconsize])
      Else
    Try myplugin = Object.New("bridge", [plugin_name, iconsize, extbinpath & "/" & Right(plugin_name, - InStr(plugin_name, ":"))])
  Endif
  If Error Then
    Debug "Couldn't load " & plugin_name
    Return
  Endif
  Debug plugin_name
  plugins[plugin_name] = myplugin
  Object.Attach(myplugin, fmain, "plugin_event")

End

Public Sub unload_plugin(plugin_name As String)

  Dim my_plugin As Object
  Try my_plugin = plugins[plugin_name]
  If Error Then Return
  plugins.Remove(plugin_name)
  Try Object.Call(my_plugin, "stop")
  my_plugin = Null

End

Private previous_search As String

Private Sub showgrid()
  Dim pad As Integer
  If fmain.padding = 0 Then 
    pad = Desktop.scale
      Else
    pad = fmain.padding
  Endif
  FMain.h = TextBox1.h + (pad * 3) + resultgrid.h
End

Public Sub immediate_search(textcontrol As Object)

  Dim aPlugin As String
  Dim t0 As Float
  
  If previous_search = textcontrol.text Then Return 'don't know why this is important, but works.
  previous_search = textcontrol.text                'don't know why this is important, but works.
  
  reinit()
  showgrid()
  mouse_busy()
  
  Debug "starting search...", textcontrol.text
  'For Each aplugin In plugins

  For Each aplugin In plugins_enabled
    t0 = Timer()
    'Debug "[START]", plugins.key
    run_plugin(aPlugin, textbox1)
    'Debug "[END]", plugins.key, "time:", Timer() - t0, "[END]"
  Next
  Debug "Search ends here."
  
  mouse_normal()

End

Public Sub run_plugin(plugin_name As String, textcontrol As Object)

  Dim rResults As RItemT[]

   rResults = Object.Call(plugins[plugin_name], "find", [textcontrol]) 'call the find method
  If rResults = Null Then Return
  
  results_list.Insert(rResults)
  ResultGrid.Rows.count += rResults.Count
  
End

Public Sub plugin_event_new_results(rResults As RItemT[])

  results_list.Insert(rResults)
  ResultGrid.Rows.count += rResults.Count

End

Public Sub ResultGrid_Data(Row As Integer, Column As Integer)

  Dim rcResult As New RItemT

  If results_list.count = 0 Then Return
  

  rcResult = results_list[Row]
  
  'two lines:
  resultgrid.data.RichText = "<b>" & rcResult.text & "</b>"
  If rcResult.subtext <> "" Then 
    resultgrid.data.RichText &= "<br><font size=-1>" & rcResult.subtext & "</font>"
  Endif
  
  'find pic from cache?
  If picture_list[row] <> Null Then
    resultgrid.Data.Picture = picture_list[row] 
    Return
  Endif
  
  'no cache :(
  If rcResult.image_file Like "mimetype://*" Then 
    Try resultgrid.Data.Picture = MyDesktop.Get_mime_Icon(Right(rcResult.image_file, -11), rSize)
    Goto fallback
  Endif
  
  If rcResult.image_file Like "desktopfile://*" Then 
    MyDesktop.init()
    MyDesktop.parse(Right(rcResult.image_file, -14))
    Try resultgrid.Data.Picture = MyDesktop.GetIcon(MyDesktop.dIconName, rSize).picture
    Goto fallback
  Endif
  
  If rcResult.image_file Like "resize://*" Then 
    'Stop
    'need a mimetype cache here or is slow
    Try resultgrid.Data.Picture = Global.Load_image(Right(rcResult.image_file, -9), rSize).Picture
    Goto fallback
  Endif
  
fallback:
  If (resultgrid.Data.Picture = Null) Then 
    Try resultgrid.Data.Picture = Picture[rcResult.image_file]
  Endif
  If resultgrid.Data.Picture = Null Then 
    Try resultgrid.Data.Picture = rcResult.hApp.GetIcon(rSize).Picture
  Endif
  
  If resultgrid.Data.picture = Null Then
    resultgrid.Data.Picture = Picture["icon:/" & rSize & "/file"]
  Endif
  
  'cache picture
  If resultgrid.Data.picture <> Null Then picture_list[row] = resultgrid.Data.picture
  
End

Public Sub mouse_busy()

  fmain.mouse = Mouse.Wait
  TextBox1.mouse = Mouse.wait

End

Public Sub mouse_normal()

  fmain.mouse = Mouse.Default
  TextBox1.mouse = Mouse.default

End

Public Sub start_item(i As Integer)

  Dim rcResult As RItemT
  Dim p As String  

  If results_list.count = 0 Then Return
  rcResult = results_list[i]  
  p = rcResult.Action_p

  Select Case rcResult.Action
    Case "DESKTOPOPEN"
      'If Lower(p) Ends ".desktop" Then 
      If global.IsDesktopFile(p) Then
        start_dot_desktop_exe(p)
      Else
        Desktop.Open(p)
      Endif
    Case "EXEC"
      Shell p For Input Output
    Case "EXEC_TERMINAL"
      start_executable_terminal(p)
    Case "XDGOPEN"
      Desktop.Open(p)
    Case "GUESS"
      
      If Exist(p) Then
        
        'desktop files with full path
        'If Lower(p) Ends ".desktop" Then
        If global.IsDesktopFile(p) Then
          start_dot_desktop_exe(p)
          Return
        Endif
        
        'directory
        If Stat(p, True).type = gb.Directory Then
          Desktop.Open(p)
          Return
        Endif
        
        'executables
        If is_executable(p) Then 
          start_executable(p)
          Return
        Endif
        
        'all of the others
        Desktop.Open(p)
        Return
        
      Endif
      
    Case "NULL"
      Return
      
    Case Else
      
  End Select
  
End

Private Function strip_desktop_args(e As String) As String

  Dim field_codes As String[] = ["f", "F", "u", "U", "d", "D", "n", "N", "i", "c", "k", "v", "m"]
  Dim code As String
  
  For Each code In field_codes
    e = Replace(e, " %" & code & " ", " ")
    If e Ends " %" & code Then e = Left(e, -3)
  Next
  Return e

End

Public Sub start_dot_desktop_exe(dPath As String)
  Dim exe_no_args As String
  Dim terminal_emulator As String
  MyDesktop.parse(dPath)
  exe_no_args = strip_desktop_args(MyDesktop.dExec)


  If MyDesktop.dTerminal Then 
    terminal_emulator = settings["terminal_emulator", Global.find_term()]
    Shell Global.terminal_cmdline(terminal_emulator, exe_no_args)
  Else
    Shell exe_no_args For Input Output
  Endif

End

Public Sub start_executable_terminal(sPath As String)
  Dim terminal_emulator As String
    terminal_emulator = settings["terminal_emulator", Global.find_term()]
    Shell Global.terminal_cmdline(terminal_emulator, sPath)
End


Public Sub start_executable(ePath As String)

  Dim msgout As String
  msgout = Message.Question(("Execute file?"), "Execute", "Cancel")
  
  Select msgout
    Case 1
      Shell ePath For Input Output
    Case 2
      Return
  End Select
  
End

Public Function is_executable(fPath As String) As Boolean

  Dim bout As String
  Dim singlecommand As Boolean = False
  Dim splitted As String[]
  Dim exe As String
  
  splitted = Split(fPath, ";| &\n", "", True)
  singlecommand = splitted.count = 1
  If Not singlecommand Then singlecommand = singlecommand Or ((fpath Begins "\"") And (fpath Ends "\""))
  If Not singlecommand Then singlecommand = ((fpath Begins "'") And (fpath Ends "'"))
  
  If singlecommand Then 
    exe = fPath 
  Else 
    exe = splitted[0]
  Endif
  
  'has to exist
  If Not Exist(exe) Then Return False
  'has to be a file
  If Stat(exe, True).type <> gb.File Then Return False
  'needs executable permissions
  Shell "bash -c \"[[ -x '" & exe & "' ]] && echo executable \"" To bout
  If (Trim(bout) = "") Then Return False
  'needs to have the right mimetype
  If Not MyDesktop.mime_exe(exe) Then Return False
  'right then!
  Return True

End

Public Sub ResultGrid_activate()

  If results_list[resultgrid.row].Action_p = Null Then Return
  start_item(resultgrid.row)
  TimerClose.Trigger

End

Public Sub TextBox1_KeyPress()

  Select Key.Code

    Case Key.end 'fill complete
      global.object_lock(textbox1)
      If textbox1.pos = Len(textbox2.Text) Then Return
      If textbox1.pos = textbox1.Length Then
        If textbox2.text <> "" Then 
          textbox1.text = textbox2.text
          textbox1_change_delay.Trigger()
        Endif
      Endif
      global.object_unlock(textbox1)
      
    Case Key.right 'fill complete
      global.object_lock(textbox1)
      If textbox1.pos = textbox1.Length Then
        textbox1.text &= Mid$(textbox2.text, Len(textbox1.text) + 1, 1)
        'If textbox1.text = textbox2.text Then 
        textbox1_change_delay.Trigger()
      Endif
      global.object_unlock(textbox1)
      
    Case Key.down
      showgrid()
      ResultGrid.SetFocus()
      If resultgrid.current = Null Then 
        Try resultgrid.Rows[0].Selected = True
      Else
        Try resultgrid.Rows[1].Selected = True
      Endif
      
    Case Key.PgDown
      showgrid()
      ResultGrid.SetFocus()
      If resultgrid.current = Null Then 
        Try resultgrid.Rows[0].Selected = True
      Else
        Try resultgrid.Rows[1].Selected = True
      Endif
      
    Case Key.enter
      If ResultGrid.row >= 0 Then  
        If results_list[resultgrid.row].Action_p = Null Then Return
        Try start_item(resultgrid.row)
        If Not Error Then timerClose.Trigger()
      Else
        showgrid()
        Try resultgrid.row = 0
      Endif
      
    Case Key.Return
      If ResultGrid.row >= 0 Then  
        If results_list[resultgrid.row].Action_p = Null Then Return
        Try start_item(resultgrid.row)
        If Not Error Then timerClose.Trigger()
      Else
        showgrid()
        Try resultgrid.row = 0
      Endif
      
  End Select
  
End

Public Sub ResultGrid_KeyPress()

  If ResultGrid.row < 0 Then Return
  
  Select Key.Code
    Case Key.Enter
      If results_list[resultgrid.row].Action_p = Null Then Return
      start_item(resultgrid.row)
      TimerClose.trigger
    Case Key.Return
      If results_list[resultgrid.row].Action_p = Null Then Return
      start_item(resultgrid.row)
      TimerClose.trigger
    Case Key.up
      If ResultGrid.Rows[0].Selected Then TextBox1.SetFocus()
    Case Key.PageUp
      If ResultGrid.Rows[0].Selected Then TextBox1.SetFocus()
  End Select

End

Public Sub MenuOpenFolder_Click()
  If resultgrid.row < 0 Then Return
  If results_list[resultgrid.row].Action_p = Null Then Return
  Try Desktop.Open(File.Dir(results_list[resultgrid.row].Action_p))
  TimerClose.Trigger

End

Public Sub MenuOpenFile_Click()
  If resultgrid.row < 0 Then Return
  If results_list[resultgrid.row].Action_p = Null Then Return
  start_item(resultgrid.row)
  TimerClose.Trigger
End

Public Sub MenuCopy_Click()
  If resultgrid.row < 0 Then Return
  Clipboard.Copy(results_list[ResultGrid.row].Clipboard_data)
End

'======================================== START SOCKET FUNCTIONS ========================================

Public My_listening_socket As ServerSocket

Public hLock As Stream

Public Sub socket_init()
  'TRY TO get a LOCK file:

  Try hLock = Lock Lock_File
  If Error Then 'alreadyrunning
    Debug "another instance already running"
    show_other_instance()
    Quit
  Endif
  'start to listen for remote commands, one connection is ok.
  My_listening_socket = New ServerSocket As "My_listening_socket"
  My_listening_socket.type = Net.Unix
  My_listening_socket.path = Socket_File
  My_listening_socket.Listen(1)

End

Public MyCSock As Socket

Public Sub show_other_instance()

  Dim sBuf As String
  MyCSock = New Socket
  MyCSock.path = Socket_File
  MyCSock.Port = Net.Local
  MyCSock.Connect()
  While (MyCSock.Status <> 7) And (MyCSock.Status > 0)
    Wait 0.1
  Wend
  If MyCSock.Status = 7 Then
    sBuf = "show\n"
    Write #MyCSock, sBuf, Len(sBuf)
    Close #MycSock
  Endif

End

Public Host As Object

Public Sub My_listening_socket_connection(RemoteHostIP As String)
  'just accept on localhost.

  host = My_listening_socket.Accept()

End

Public Sub socket_Read()

  Dim command As String = ""
  Dim old_visible As Boolean = fmain.visible
  Line Input #Last, command
  If command = "show" Then
    Repeat
      fmain.visible = Not (old_visible)
      Wait
    Until fmain.visible = Not (old_visible)
  Endif
  My_listening_socket.close
  My_listening_socket.Listen(1)

End

'-- END SOCKET FUNCTIONS ---------------------------------------------------------------------

'--- TRYICON RELATED

Public TrayIcon2 As Trayicon

Public Sub InitTrayIcon()
  
  Dim SystemTray As Boolean = True

  Try SystemTray = desktop.HasSystemTray
  If Error Then
    Debug "Couldn't check if your desktop has a system tray, assuming it has"
  Endif
  
  If Not SystemTray Then Return
  Try TrayIcon2 = New Trayicon 
  If Error Then Debug "Cannot Init Trayicon"
  TrayIcon2.Picture = Picture["appicon.png"]
  TrayIcon2.Visible = True
  object.Attach(TrayIcon2, Me, "TrayIcon2")
  TrayIcon2.PopupMenu = "TrayMenu"
  If Error Then Debug "Cannot Init Trayicon"

End

Public Sub TrayIcon2_click()

  If fmain.visible Then 
    MySettings.save()
    Form_Hide()
  Else
    Form_Show()
  Endif

End

Public Sub MenuTrayOptions_Click()

  hSettings.Show()

End

Public Sub QuitMenuTray_Click()

  myQuit()

End

Public Sub MenuTrayShow_click()

  Form_Show()

End

'-- END TRAYICON FUNCTIONS ---------------------------------------------------------------------

'-- XBINDKEYS ---------------------------------------------------------------------

Public Sub xb_HotkeyPressed(action As String)

  If action = "show" Then
    If fmain.visible Then
      MySettings.save()  
      fmain.Hide()
    Else
      fmain.Show()
    Endif
  Endif

End

Public Sub xb_show_init_error(Optional force As Boolean = False)
  Message.optional("Could not initialize xbindkeys, Is it installed?,Shortcuts will not work!", "Ok", "hide_xbindkeys_not_installed", "error", force)
  Settings.Save()
End


Public Sub setup_xbindkeys()
  Shell "killall xbindkeys_higgins &>/dev/null" Wait
  Wait 0.1
  Shell "killall -9 xbindkeys_higgins &>/dev/null" Wait
  xb = New XbindKeys(xb_rcpath, confpath & "/xbindkeys_higgins") As "xb"
  If xb.init_error Then
    xb_show_init_error()
    Return
  Endif
End

'-- END XBINDKEYS ---------------------------------------------------------------------

Private Function plugins_ordered_array() As String[]
  Dim i As Integer
  Dim t As String
  
  Dim plugins_saved As New String[]
  Dim plugins_available As New String[]

  'pick a list from already saved plugins
  Try plugins_saved = Split(Settings["hsettings/plist_all"])

  'pick a list of all available plugins and 
  plugins_available = Dir(".gambas", "PLUGIN_*").Sort()
  For i = plugins_available.max DownTo 0
    If (plugins_available[i] Ends "_GUI") Then plugins_available.Delete(i)
  Next  

  For Each t In Dir(extbinpath, "", gb.file)
    plugins_available.add("EXT:" & t)  
  Next
  

  'delete from saved plugins every plugin not available
  For i = plugins_saved.max DownTo 0
    If plugins_available.Find(plugins_saved[i]) < 0 Then plugins_saved.Delete(i)
  Next
 
  'append to the plugins the ones missing from saved plugins
  For i = 0 To plugins_available.max
    If plugins_saved.Find(plugins_available[i]) < 0 Then plugins_saved.Add(plugins_available[i])
  Next

  'return valid plugins
  Return plugins_saved
 
End


Public Sub Delete_childs(parent As Object, Optional preserve As Object)
  'delete all objects that are child of "parent"
  Dim child As Object
  Dim child_is_parent As Boolean = False
  If preserve = Null Then preserve = parent
  For Each child In parent.children
    child_is_parent = False
    Try child_is_parent = child.children.count > 0
    If child_is_parent Then Delete_childs(child, preserve)
    child.Delete
  Next
End


Public Sub init_hSettings(Optional redraw As Boolean = False)
  Dim plugin_name As String  
  Dim plist As String 
  Dim plugin_class As Class
  Dim plugin_is_enabled As Boolean
  Dim plist_all As New String[]
  Dim ext_module As String

  plugins_enabled = New String[]
  
  Try plist = Settings["hsettings/plist"]
  If Not Error Then plugins_enabled = Split(plist)

  Delete_childs(hsettings.Frame1)

  For Each plugin_name In plugins_ordered_array()
    plugin_is_enabled = (plugins_enabled.find(plugin_name) > -1)
    If Not plugin_is_enabled Then 'check if this is a newcomers and wants to be enabled by default
      plist_all = Split(Settings["hsettings/plist_all"])
      If plist_all.Find(plugin_name) < 0 Then 'newcomers!
        Try plugin_class = Class.Load(plugin_name)
        If Not Error Then
          Try plugin_is_enabled = Object.GetProperty(plugin_class, "Default_enabled")
        Endif
      Endif
    Endif
    Draw_plugin(plugin_name, plugin_is_enabled, redraw)
  Next
  save_plugin_list() 

End



Public Sub Draw_plugin(plugin_name As String, enabled As Boolean, Optional redraw As Boolean = False)
  Dim o_hbox As Hbox
  Dim o_checkbox As Checkbox
  Dim o_button, o_buttonup, o_buttondown As Button
  Dim o_label As Label
  Dim friendly_name, description As String
  Dim plugin_class As Class
  Dim configurable As Boolean = False
  Dim o_separator As Separator

    Try plugin_class = Class.Load(plugin_name)
    If (Not Error ) Or (plugin_name Begins "EXT:") Then
      If Not (plugin_name Begins "EXT:") Then
        description = Object.GetProperty(plugin_class, "Description")
        friendly_name = Object.GetProperty(plugin_class, "Friendly_name")
        configurable = False
        Try configurable = Object.GetProperty(plugin_class, "Configurable")
          Else
        description = "Bridge to external plugin"
        friendly_name = Right(plugin_name, - InStr(plugin_name, ":"))
        configurable = False
      Endif
    Else
      friendly_name = plugin_name
    Endif
    
    o_hbox = New HBox(hSettings.frame1)
    o_hbox.h = hSettings.Font.TextHeight("|") * 1.5

        
    o_checkbox = New Checkbox(o_hbox) As "plugin_checkbox"
    o_checkbox.text = friendly_name
    o_checkbox.AutoResize = True
    o_checkbox.tag = plugin_name
    o_checkbox.Font.Bold = True
    o_checkbox.Expand = True
    
    global.object_lock(o_checkbox)
      If enabled Then
        o_checkbox.value = CheckBox.True
        If (Not redraw) Then load_plugin(plugin_name, rsize)
      Else
        o_checkbox.value = CheckBox.false
      Endif
    global.object_unlock(o_checkbox)
    
    If configurable Then
      o_button = New Button(o_hbox) As "plugin_configure"
      o_button.Border = False
      o_button.tag = plugin_name
      o_button.w = hSettings.Font.TextHeight("|") * 1.5
      o_button.Picture = Picture["icon:/medium/options"]
    Endif
    
    o_buttondown = New Button(o_hbox) As "o_buttondown"
    o_buttondown.border = False
    o_buttondown.w = o_hbox.H
    o_buttondown.picture = Picture["icon:/medium/down"]
    o_buttondown.tag = plugin_name
    
    o_buttonup = New Button(o_hbox) As "o_buttonup"
    o_buttonup.border = False
    o_buttonup.w = o_hbox.H
    o_buttonup.picture = Picture["icon:/medium/up"]
    o_buttonup.tag = plugin_name
    
    
    o_label = New Label(hSettings.frame1)
    o_label.Font.size -= 1
    o_label.text = description
    o_label.AutoResize = True
    
    o_separator = New Separator(hsettings.Frame1)
    o_separator.h = Desktop.Scale

End

Public Sub o_buttondown_Click()
  Dim i As Integer
  Dim t As String
  Dim current_plugin As String = Last.tag
  Dim scroll_y As Integer 

  scroll_y = Hsettings.Frame1.scrolly
  
  plugins_all = New String[]
  save_plugin_list() 'ensure we will find hsettings/plist_all:
  Try plugins_all = Split(Settings["hsettings/plist_all"])
  If Error Then 
    Stop
    Return
  Endif

  i = plugins_all.Find(current_plugin)
  If i < 0 Then Return 'not found
  If i >= plugins_all.count Then Return 'already at the bottom.
  
  'swap plugin items representation in the array
  t = plugins_all[i + 1]
  plugins_all[i + 1] = current_plugin
  plugins_all[i] = t

  'save the new ordered array
  Settings["hsettings/plist_all"] = plugins_all.Join()
  Settings.Save()

  'redraw the plugins
  init_hSettings(True)
  
  Wait
  'adjust scroll:
    Hsettings.Frame1.scrolly = scroll_y
  
End


Public Sub o_buttonup_Click()
  Dim i As Integer
  Dim t As String
  Dim current_plugin As String = Last.tag
  Dim sy As Integer = Hsettings.Frame1.scrolly
 
  plugins_all = New String[]
  save_plugin_list() 'ensure we will find hsettings/plist_all:

  Try plugins_all = Split(Settings["hsettings/plist_all"])

  If Error Then 
    Stop
    Return
  Endif

  i = plugins_all.Find(current_plugin)
  If i <= 0 Then Return 'not found or already at the bottom.

  'swap plugin items representation in the array
  t = plugins_all[i - 1]
  plugins_all[i - 1] = current_plugin
  plugins_all[i] = t

  'save the new ordered array
  Settings["hsettings/plist_all"] = plugins_all.Join()
  Settings.Save()

  'redraw the plugins
  init_hSettings(True)
  
  Wait
  Hsettings.Frame1.scrolly = sy
  
End


Public Sub plugin_checkbox_Click()
  
  If Last.value = CheckBox.True Then
    If Not (plugins.Exist(Last.tag)) Then
      load_plugin(Last.tag, rsize)
    Endif
  Else
    unload_plugin(Last.tag)
  Endif
  
  save_plugin_list()
  
End

Public Sub plugin_configure_Click()

  Dim myplugin As Object
  Try myplugin = plugins[Last.tag]
  If Error Then Return
  Try Object.Call(myplugin, "configure")
  
End

Public Sub save_plugin_list()
  
  Dim o As Object  
  Dim is_plugin As Boolean
  Dim savename As String
  
  plugins_all = New String[]
  plugins_enabled.clear
  plugins_enabled = New String[]
  

  For Each o In hSettings.Controls
    is_plugin = False
    If o Is CheckBox Then
      If (o.tag Begins "PLUGIN_") Or (o.tag Begins "EXT:") Then
        Debug "saving " & o.handle, o.tag
        Try savename = o.tag
        If o.value = CheckBox.True Then plugins_enabled.Add(savename)
        plugins_all.Add(savename)
      Endif
    Endif
  Next

  Settings["hsettings/plist"] = plugins_enabled.Join()
  Settings["hsettings/plist_all"] = plugins_all.Join()


End

Public Sub TimerClose_Timer()

  MySettings.save_geometry()
  fmain.close
  
End

Public Sub myQuit()

  Try save_plugin_list()
  Try MySettings.save()
  Try xb.close
  Try My_listening_socket.Close
  Try MyCSock.Close
  Try hLock.close
  Try hSettings.close
  plugins.clear
  fmain.persistent = False
  Try TrayIcon2.Delete()
  fmain.Close()
  fmain.Delete()
  
End

Private Sub cmdline_args()
  
  Args.begin("Higgins:")
    Try global.unfocused_hide = Not (Args.Has("p", "persistent", ("Do not auto-hide main window")))
    Try global.UseTray = Not (Args.Has("n", "notray", ("Do not use a tray icon")))
    Try global.cleartext = Args.Has("c", "cleartext", ("Clear the previous search on show"))
  Args.End()
  
End


Public Sub first_init()
 Dim padding As Integer = (Desktop.scale * 2)
  Dim newuser As Boolean = False
  Dim msg As String
  Me.visible = False
  cmdline_args()
  resultgrid.Font.size = fmain.Font.size * 1.112
  If Not Exist(Confpath, True) Then
    newuser = True
    Shell.MkDir(confpath)
  Endif
  If Not Exist(extbinpath, True) Then
    Shell.Mkdir(extbinpath)
  Endif


  If Newuser Then
    msg = ("Higgins is not configured") & "\n"
    msg &= ("Please configure at least the hotkey") & "\n"
    msg &= ("to show the higgins window.") & "\n\n"
    Message.Info(msg)
  Endif

  resultgrid.Rows.h = resultgrid.Font.RichTextHeight("|j<br>|j") + padding
  rSize = ResultGrid.Rows.H - padding
  MySettings.load()

  
  If Not Exist(xb_rcpath) Then
    msg = "No shortcut defined to hide/show the main window,"
    msg &= "it is advised to define one in the options window."
    Message.Optional(msg, "Ok", "dontshow_message_xbindKeys", "warning")
    Settings.Save()
  Endif

  socket_init()
  If global.UseTray Then InitTrayIcon()
  
  resize_form()
  
  init_hSettings()
  
  textbox1_change_delay = New Timer As "textbox1_change_delay"
  textbox1_change_delay.enabled = False
  
  If Newuser Then hSettings.Show()
  
  setup_xbindkeys()
End



'-- FMAIN FUNCTIONS  ---------------------------------------------------------------------



Public Sub Form_KeyRelease()

  If Key.code = Key.esc Then 
    MySettings.save()
    Form_Hide()
  Endif

End

Public Sub Form_Hide()

  ResultGrid.UnSelectAll()
  resultgrid.row = -1
  If fmain.tag = "minimized" Then Return
  fmain.visible = False
  fmain.tag = "minimized"
  previous_search = ""
End

Public Sub Form_Show()
  FMain.border = (hsettings.CheckBox1.value <> CheckBox.true)
  global.object_unlock(TextBox1) '<--?? needed?
  MySettings.load_geometry()

  fmain.visible = True
  fmain.tag = ""
  resize_form()
  Wait
  TextBox1.SetFocus()
  
End

'-- END FMAIN FUNCTIONS  ---------------------------------------------------------------------

Public Sub QuitMenu_Click()
  myQuit()
End

Public Sub TextBox1_GotFocus()
  ' 
  ' Dim o As Object
  ' Wait
  ' Wait 0.1
  ' Try textbox1.SelectAll
  ' textbox1.sele
  ' Wait 0.1
  ' textbox1.Select(0, String.Len(textbox1.text))
  ' Wait 0.1
  ' o = findSelectable(TextBox1)

  If global.cleartext Then 
    textbox1.Clear
    textbox1.text = ""
      Else
    select_all_override(textbox1)
  Endif
    

End


Private Sub select_all_override(t As Textbox)
  While t.Selection.text <> t.Text 
    textbox1.SelectAll
    Wait 0.01
  Wend
End



Private Function findSelectable(o As Object) As Object

  Dim c As Integer = 0
  Dim child, selectable As Object

  Try o.selectall
  If Error Then
    Try c = O.children.count
    If c > 0 Then
      For Each child In O.children
        selectable = findSelectable(CHILD)
        If selectable <> Null Then 
          Return selectable
        Endif
      Next
    Endif
  Else
    Return o
  Endif

End

Public Sub ButtonConfigure_Click()

  hSettings.show
  Wait
  Me.hide

End

Public Sub indexer_indexing_done(finish_time As Date)
  
  MySettings.plugin_indexer_last_index_time = finish_time
  
End

Public Sub Panel1_Arrange()

  With TextBox1
    TextBox2.Move(.x, .y, .w, .h)
    TextBox2.Lower
  End With

End

Public Function Complete(s As String) As String

  Dim r As New String[]
  Dim d, f, out As String
  
  d = File.Dir(s)
  
  If Trim(s) = "" Then Return ""  'dont complete nulls
  If InStr(s, " ") Then Return    'dont complete if spaces in search
  
  If Left(s) = "/" Then 'search in full path
    
    If Right(d) <> "/" Then d &= "/"
    
    f = File.Name(s)
    Try r = Dir(d, f & "*")
    
    If Not Error Then
      If r.count > 0 Then
        If IsDir(d & r[0]) Then r[0] &= "/"
        out = d & r[0]
        Goto returnlabel
      Endif
    Endif
    
  Else 'search in $PATH
    
    For Each d In Split(Application.Env["PATH"], ":")
      Try r = r.Insert(Dir(d, s & "*"))
    Next
    
    If r.Count > 0 Then 
      out = r[0]
      Goto returnlabel
    Endif
    
  Endif
  
returnlabel:
  If out Begins s Then Return out
  
  Return ""
  
End

Public Sub Form_Leave()

  MySettings.save()

End

Public Sub ResultGrid_MouseMove()
  Dim iRow As Integer = 0
  iRow = resultgrid.RowAt(Mouse.y)
  If iRow <> -1 Then Try resultgrid.Rows[iRow].selected = True
  

End

Public Sub Form_Menu()
  Show_main_menu(False)
End

Private Sub Show_main_menu(bResult_actions As Boolean)
  Dim bActions_enabled As Boolean 
  bActions_enabled = bResult_actions And (ResultGrid.current <> Null)
  
  MenuOpenFolder.Enabled = bActions_enabled
  MenuOpenFile.Enabled = bActions_enabled
  MenuCopy.enabled = bActions_enabled
  menupopup.Popup()
End

Public Sub ResultGrid_Menu()
  Show_main_menu(True)
End



Public Sub Form_LostFocus()
  Form_LostFocus_workaround()
End


Public Sub TextBox1_LostFocus()
  Form_LostFocus_workaround()
End

Public Sub ResultGrid_LostFocus()
  Form_LostFocus_workaround()
End

Private Sub Form_LostFocus_workaround()
  If global.unfocused_hide Then
    Wait 0.1
    If Not (Desktop.ActiveWindow = fmain.Handle) Then form_hide
  Endif
End

Public Sub Form_MouseDrag()
  Me.Move(fmain.x + (mouse.x - mouse.StartX), fmain.y + (mouse.y - mouse.Starty))
End
