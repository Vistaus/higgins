' Gambas class file

Public Struct rItem
  Priority As Integer
  Category As String 'app,locate,calculate,desktopexec,execute
  Text As String
  SubText As String
  Mexec As String
  'pic As Picture
  happ As DesktopApps
  uri As String
End Struct

Public locatep As Process
Public results_file As String = Temp()
Public results_list As New RItem[]
Public rSize As Integer

'how many characters needs to be entered to start the following searches
Public Const min_char_app As Integer = 1
Public Const min_char_execute As Integer = 2
Public Const min_char_app_by_desc As Integer = 4
Public Const min_char_calculate As Integer = 2
Public Const min_char_locate As Integer = 3



'no effect by now, may come handy to sort the results (?)
Public Const calculate_priority As Integer = 100
Public Const app_priority As Integer = 90
Public Const execute_priority As Integer = 80
Public Const DesktopExec_priority As Integer = 70
Public Const locate_priority As Integer = 60



Public Sub resize_form()
  FMain.h = TextBox1.h + (Desktop.scale * 3)
End

Public Sub TextBox1_Change()
  Dim previous_search As String
  Dim current_search As String
  Try current_search = TextBox1.text 
  If Error Then Return
  If current_search = "" Then 
    resize_form()
    reinit()
    Return
  Endif
  
  Try previous_search = TextBox1.text
  If Error Then Return
  Wait 0.25

  Try current_search = TextBox1.text 
  If Error Then Return
  If previous_search <> current_search Then Return
  'If String.Len(current_search) < 3 Then Return
  search(current_search)
End

Public Sub initgrid()
  ResultGrid.Rows.count = 0
  ResultGrid.columns.count = 1
  ResultGrid.mode = Select.Single
  ResultGrid.Show()
End

Public Sub reinit()
  Dim running As String
  Dim padding As Integer
  results_list.Clear()
  initgrid()
  MyDesktop.init()
  If locatep <> Null Then
    Repeat
      Debug "kill  locate"
      Try locatep.drop
      Try locatep.close
      Try locatep.kill
      Wait
      running = Exist("/proc/" & locatep.handle)
    Until Not running
    'Until (locatep.state <> locatep.Running) 

  Endif

  padding = (Desktop.scale * 2)
  resultgrid.Rows.h = resultgrid.Font.RichTextHeight("|j<br>|j") + padding
  rSize = ResultGrid.Rows.H - padding
End


Public Sub search(term As String)
  Dim results As String
  reinit()
  FMain.h = TextBox1.h + (Desktop.scale * 3) + resultgrid.h
  FMain.mouse = Mouse.wait

  Select Left(term)
    Case "="
      Calculate(Right(term, -1))
    Case Else
      resultgrid.tag = "locate"

      'search for apps
      find_apps(term)
      
      'search for apps by description
      find_apps_by_desc(term)

      'search for executables
      find_executables(term)

      'search for files
      locate(term)
  End Select
  FMain.mouse = Mouse.Default
End

Public Sub Calculate(term As String)
  Dim result As New RItem
  If String.Len(term) < min_char_calculate Then Return
  Try result.Text = Eval(Term)
  If Error Then Return
  result.Category = "calculate"
  result.Priority = calculate_priority
  resultgrid.Rows.count = 1
  results_list.Add(result)
End


Public Sub find_apps(term As String)
  Dim happ As New DesktopApps
  Dim app As String
  Dim result As RItem
  If String.Len(term) < min_char_app Then Return

  For Each app In DesktopApps
    If InStr(Lower(app), Lower(term)) Then
      happ = DesktopApps[app]
      result = New RItem
      result.category = "app"
      result.Priority = app_priority
      result.Text = happ.name
      result.subtext = happ.comment
      result.mExec = happ.Exec_R_noargs
      result.uri = happ.file_path
      result.happ = happ
      results_list.Add(result)
      ResultGrid.Rows.count += 1
      Wait
    Endif
  Next
End

Public Sub find_apps_by_desc(term As String)
  Dim happ As New DesktopApps
  Dim app As String
  Dim result As RItem
  
  If String.Len(term) < min_char_app_by_desc Then Return
  For Each app In DesktopApps
    happ = DesktopApps[app]
    If InStr(Lower(happ._$Comment), Lower(term)) > 0 Then
      result = New RItem
      result.category = "app"
      result.Priority = app_priority
      result.Text = happ.name
      result.subtext = happ.comment
      result.mExec = happ.Exec_R_noargs
      result.uri = happ.file_path
      result.happ = happ
      results_list.Add(result)
      ResultGrid.Rows.count += 1
    Endif
  Next
End

Public Function Which(exe As String) As String
  Dim exefound As String
  Shell "which " & exe To exefound
  Return Trim(exefound)
End

Public Sub find_executables(term As String)
  Dim exe, exe_found As String 
  Dim result As RItem
  Try exe = Split(term, " ", "", True)[0]
  If exe = "" Then Return
  
  exe_found = Which(exe)
  If exe_found = "" Then Return
  result = New RItem
  result.Category = "execute"
  result.Mexec = term
  result.Priority = execute_priority
  result.Text = "Run " & term
  result.SubText = "From " & File.Dir(exe_found)
  result.uri = exe_found
  results_list.Add(result)
  ResultGrid.Rows.count += 1
  
  result = New RItem
  result.Category = "execute_terminal"
  result.Mexec = term
  result.Priority = execute_priority
  result.Text = "Run " & term & " in the terminal emulator"
  result.SubText = "From " & File.Dir(exe_found) 
  result.uri = exe_found
  results_list.Add(result)
  ResultGrid.Rows.count += 1
  
End


Public Sub locate(term As String)
Dim tmp As String
  If String.Len(term) < min_char_locate Then Return
  locatep = Shell "locate -l 1000 -i " & "'" & term & "'" For Input As "locatep"
  locatep.tag = term
  Debug "locate " & "'" & term & "'" 
  ' While locatep.state = Process.running
  '   If closing Then Return
  '   Wait 0.1
  ' Wend
End


Public Sub locatep_read()
  Dim results, result As String
  Dim rResult As RItem
  Dim is_desktop_exec As Boolean = False
  Dim t As String

  While Not Eof(locatep)
    Line Input #locatep, result
    If (result = "") Or (locatep.tag <> TextBox1.text) Then 
      Wait
      Return
    Endif
    If Not Exist(result, True) Then Return
    rResult = New RItem
    'put executable desktop files at the top:
    If result Ends ".desktop" Then 
      MyDesktop.init()
      MyDesktop.parse(result)
      If MyDesktop.dExec <> "" Then is_desktop_exec = True
    Endif

    If is_desktop_exec Then
      rResult.Category = "desktopexec"
      rResult.Priority = DesktopExec_priority
        Else
      rResult.Category = "locate"
      rResult.Priority = locate_priority
    Endif

    rResult.mExec = result
    rResult.uri = result
  
    rResult.Text = File.Name(result) 
    rResult.SubText = File.Dir(result)
    
    results_list.Add(rResult)
    ResultGrid.Rows.count += 1
  Wend

End



Public Sub ResultGrid_Data(Row As Integer, Column As Integer)
  Dim img As Image
  Dim t As String
  Dim i As Integer
  Dim rcResult As New RItem
  If results_list.count = 0 Then Return
  rcResult = results_list[Row]
  If resultgrid.current = Null Then resultgrid.Rows[0].Selected = True

  'two lines:
  resultgrid.data.RichText = "<b>" & rcResult.text & "</b>"
  If rcResult.subtext <> "" Then 
    resultgrid.data.RichText &= "<br><font size=-1>" & rcResult.subtext & "</font>"
  Endif

  'find pic
  Select Case rcResult.Category  'app,locate,calculate,desktopexec
    Case "app"
      resultgrid.Data.Picture = rcResult.happ.GetIcon(rSize).Picture
    Case "execute"
      resultgrid.Data.Picture = Picture["icon:/" & rSize & "/terminal"]
    Case "execute_terminal"
      resultgrid.Data.Picture = Picture["icon:/" & rSize & "/terminal"]
    Case "desktopexec"
      resultgrid.Data.Picture = DesktopMime.FromFile(rcResult.mExec).GetIcon(rSize).Picture
    Case "locate"
      If Exist(rcResult.uri, True) Then
        If Stat(rcResult.uri, True).type = gb.Directory Then
          resultgrid.Data.Picture = Picture["icon:/" & rSize & "/directory"]
            Else
          resultgrid.Data.Picture = DesktopMime.FromFile(rcResult.uri).GetIcon(rSize).Picture
        Endif
      Endif
    Case "calculate"
      resultgrid.Data.Picture = Picture["icon:/" & rSize & "/calculator"]
  End Select
  If resultgrid.Data.picture = Null Then
    resultgrid.Data.Picture = Picture["icon:/" & rSize & "/file"]
  Endif
  
End

Public Sub start_item(i As Integer)
  Dim rcResult As New RItem
  Dim df As Desktopfile
  Dim xdg_terminal As String
  Dim cmdline As String
  
  rcResult = results_list[i]
  Select Case rcResult.Category 'app,locate,calculate,desktopexec

    Case "locate"
      Desktop.Open(rcResult.mExec)

    Case "execute_terminal"
      xdg_terminal = Temp
      Copy "xdg-terminal.sh" To xdg_terminal
      Chmod xdg_terminal To "rwxr-x---" 
      Shell xdg_terminal & " \"" & "sh -c ' " & rcResult.mExec & "; echo; echo  Press enter to exit ; read ' \""
    Case "execute"
      Shell rcResult.mExec

    Case "app"
      Shell rcResult.mExec

    Case "desktopexec"
      Shell rcResult.mExec
  End Select
End


Public Sub ResultGrid_activate()
  start_item(resultgrid.row)
  TimerClose.Trigger
End

Public Sub TextBox1_KeyPress()
  Select Key.Code
    Case Key.down
      ResultGrid.SetFocus()
      Try resultgrid.Rows[1].Selected = True
    Case Key.PgDown
      ResultGrid.SetFocus()
      Try resultgrid.Rows[1].Selected = True
    Case Key.enter
      Try start_item(0)
      TimerClose.Trigger()
    Case Key.Return
      Try start_item(0)
      TimerClose.Trigger()
  End Select
End


Public Sub ResultGrid_KeyPress()
  Select Key.Code
    Case Key.Enter
      start_item(resultgrid.row)
      TimerClose.trigger
    Case Key.Return
      start_item(resultgrid.row)
      TimerClose.trigger
    Case Key.up
      If ResultGrid.Rows[0].Selected Then TextBox1.SetFocus()
    Case Key.PageUp
      If ResultGrid.Rows[0].Selected Then TextBox1.SetFocus()
  End Select
End


Public Sub MenuOpenFolder_Click()
  Try Desktop.Open(File.Dir(results_list[resultgrid.row].uri))
  TimerClose.Trigger
End

Public Sub MenuOpenFile_Click()
  Try Desktop.Open(resultgrid.Current.text)
  TimerClose.Trigger
End

Public Sub MenuCopy_Click()
  Try Clipboard.Copy(results_list[ResultGrid.row].uri)
End


Private Function Screenbypos(x As Integer, y As Integer) As Screen
  Dim s As Screen
  For Each s In Screens
    If (x >= s.x) And x <= (s.x + s.W) Then
      If (y >= s.y) And y <= (s.y + s.h) Then
        Return s
      Endif
    Endif
  Next
  
  'no screen found !? repeat with more tolerance:
  For Each s In Screens
    If (x + 50 >= s.x) And x <= (s.x + s.W + 50) Then
      If (y + 50 >= s.y) And y <= (s.y + s.h + 50) Then
        Return s
      Endif
    Endif
  Next

  'still no screen found? return the first.
  Debug "Couldn 't get the matching screen (!)"
  Return Screens[0]
End


Public Function Relative_window_geom(o As Window) As Integer[]
  'get the object position relative to the screen is on
  Dim rx, ry, ox, oy As Integer
  Dim cs As Screen
  Dim out As New Integer[]
  cs = Screenbypos(o.x, o.y)
  ox = cs.X 'offset
  oy = cs.Y 'offset
  rx = o.x - ox
  ry = o.y - oy
  out.Add(rx)
  out.Add(ry)
  out.Add(o.w)
  out.Add(o.h)
  Return out
End

Public Sub Form_Hide()
  fmain.close()
End



Public Sub Form_Open()
  load_geometry()
  reinit()
  resize_form()
End

Public Sub load_geometry()
  Dim s As Screen
  Dim rx, ry, w, h As Integer
  s = Screenbypos(Mouse.ScreenX, Mouse.ScreenY)
  rx = Settings["win_rx", 0] 
  ry = Settings["win_ry", 0] 
  w = Settings["win_w", (s.w Div 2)] 
  h = Settings["win_h", 64] 
  fmain.Move(rx + s.x, ry + s.y, w, h)
End

Public Sub save_geometry()
  Dim xy_r As Integer[]
  xy_r = Relative_window_geom(fmain)
  Settings["win_rx"] = xy_r[0]
  Settings["win_ry"] = xy_r[1]
  Settings["win_w"] = xy_r[2]
  Settings["win_h"] = xy_r[3]
End

Private closing As Boolean = False
Public Sub TimerClose_Timer()
  closing = True
  save_geometry()
  fmain.close
End

Public Sub Form_Close()
  TimerClose_Timer()
End

Public Sub Form_KeyRelease()
  If Key.code = Key.esc Then TimerClose.trigger
End



